"---------------------------------------------
" NeoBundle 関連
"---------------------------------------------
augroup NeoBundleSource
    autocmd!
    "if has("mac")
    "    autocmd FileType {ruby,markdown} NeoBundleSource
    "                \ vim-rvm
    "    " ruby, markdown のBufferではRvmで設定した環境を使う
    "    autocmd FileType {ruby,markdown} :Rvm
    "endif
    autocmd FileType ruby NeoBundleSource
                \ vim-rails
                \ vim-ruby
    autocmd FileType {xhtml,html,css,eruby,markdown} NeoBundleSource
                \ emmet-vim
    autocmd FileType {javascript,coffee} NeoBundleSource
                \ jasmine.vim
                \ javascript-libraries-syntax
                \ jqapi
                \ jscomplete-vim
                \ jsref
                \ tern_for_vim
    autocmd FileType {javascript} NeoBundleSource
                \ vim-javascript-syntax
                \ Better-Javascript-Indentation
    autocmd FileType haml NeoBundleSource
                \ vim-haml
augroup END


"---------------------------------------------
" Unite.vim関連
"---------------------------------------------
" 入力モードで開始する
let g:unite_enable_start_insert=1
" history/yankの有効化
let g:unite_source_history_yank_enable =1
" デフォルトでは ignorecase と smartcase を使う
call unite#set_profile('default', 'context', {'ignorecase': 1})
call unite#set_profile('default', 'context', {'smartcase': 1})
" ファイル選択時は smartcase を使わない
call unite#set_profile('files', 'context', {'smartcase': 0})

" バッファ一覧
nnoremap <silent> ;b :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ;f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" ディレクトリ一覧
nnoremap <silent> ;d :<C-u>UniteWithBufferDir -buffer-name=directories directory<CR>
" レジスタ一覧
nnoremap <silent> ;r :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ;m :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ;j :<C-u>Unite buffer file_mru<CR>
" memolist
nnoremap <silent> ;n :Unite file:<C-r>=g:memolist_path."/"<CR><CR>
" Tags
nnoremap <silent> ;t :Unite tag<CR>
" Outline
nnoremap <silent> ;o :Unite outline<CR>
" Yank
nnoremap <silent> ;y :<C-u>Unite history/yank<CR>
" snippet
nnoremap <silent> ;s :<C-u>Unite snippet<CR>
" Line/fast
nnoremap <silent> ;/  :<C-u>Unite -buffer-name=search line/fast -start-insert -no-quit<CR>
" grep検索
nnoremap <silent> ;g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ;cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
" grep検索結果の再呼出
nnoremap <silent> ;l  :<C-u>UniteResume search-buffer<CR>
" unite grep に pt or ag(The Silver Searcher) を使う
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q


"---------------------------------------------
" Fugitive 関連
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" QuickRun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = {}
let g:quickrun_config.markdown = {
      \ 'command': 'bluefeather',
      \ 'exec': 'cat %s | %c - -f d',
      \ 'hook/enable': 1,
      \ 'hook/eval/template': "CSS: $HOME/dotfiles/vimfiles/template/style.css\nEncoding: utf-8\n%s",
      \ 'hook/time/enable': 0,
      \ 'outputter': 'browser'
      \ }


"------------------------------------
" open-blowser.vim
"------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Space>fu <Plug>(openbrowser-open)
vmap <Space>fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap <Space>fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>


"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
" 自動的に開いたり閉じたりする
let g:syntastic_auto_loc_list=1
" Javac Option
let g:syntastic_java_javac_options = '-encoding utf-8 -J-Dfile.encoding=UTF8 -Xlint'
let g:syntastic_java_javac_config_file_enabled = 1
" TypeScript Option
let g:syntastic_typescript_checkers = ['tslint']
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'java'] } " polymer使うと沢山出るから

"------------------------------------
" ref-sources.vim
"------------------------------------
" ローカルに保存されたドキュメントを参照する
let g:ref_jquery_doc_path = $HOME . '/.vim/bundle/jqapi'
let g:ref_javascript_doc_path = $HOME . '/.vim/bundle/jsref/htdocs'
" キャッシュを有効にする
let g:ref_use_cache = 1


"---------------------------------------------
" Align 関連
"---------------------------------------------
" utf8を使うときに必要らしい
let g:Align_xstrlen=3


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
             \'indentation' : '    ',
             \}
let g:user_emmet_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "$(function() {\n\t${cursor}${child}\n});",
\      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
\      'fn' : "(function() {\n\t${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\    },
\  },
\ 'java' : {
\  'indentation' : '    ',
\  'snippets' : {
\   'main': "public static void main(String[] args) {\n\t|\n}",
\   'println': "System.out.println(\"|\");",
\   'class': "public class | {\n}\n",
\  },
\ },
\}

"---------------------------------------------
" surround 関連
"---------------------------------------------
" 記号に対応する数字は :ascii で調べられる
" -
let g:surround_45 = "<% \r %>"
" =
let g:surround_61 = "<%= \r %>"


"---------------------------------------------
" memolist 関連
"---------------------------------------------
map ,mn  :MemoNew<CR>
map ,ml  :MemoList<CR>
map ,mg  :MemoGrep<CR>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"
let g:memolist_unite = 1


"---------------------------------------------
" vim markdown 関連
"---------------------------------------------
let g:vim_markdown_initial_foldlevel=2
