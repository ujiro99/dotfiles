"---------------------------------------------
" Ctrlp 関連
"---------------------------------------------
let g:ctrlp_map = '<Nop>'
let g:ctrlp_clear_cache_on_exit = 0                   " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max = 500                            " MRUの最大記録数
let g:ctrlp_open_new_file = 1                         " 新規ファイル作成時にタブで開く
let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
let g:ctrlp_funky_syntax_highlight = 1

if executable('ag')
  let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
endif

nnoremap ; <Nop> " Use ; for prefix
nnoremap ;a :<C-u>CtrlP<Space>
nnoremap ;j :<C-u>CtrlPBuffer<CR>
nnoremap ;d :<C-u>CtrlPDir<CR>
nnoremap ;f :<C-u>CtrlP<CR>
nnoremap ;l :<C-u>CtrlPLine<CR>
nnoremap ;m :<C-u>CtrlPMRUFiles<CR>
nnoremap ;q :<C-u>CtrlPQuickfix<CR>
nnoremap ;n :<C-u>CtrlPMixed<CR>
nnoremap ;t :<C-u>CtrlPTag<CR>
nnoremap ;o :<C-u>CtrlPFunky<CR>

"---------------------------------------------
" Fugitive 関連
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" QuickRun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings = 1
" go test
let g:quickrun_config['go.test'] = {
\   'command' : 'go',
\   'exec' : ['%c test']
\}


"---------------------------------------------
" WatchDog
"---------------------------------------------
" :WatchdogsRun 終了時に quickfix ウィンドウを閉じる
let g:quickrun_config["watchdogs_checker/_"] = {
\   "runner/vimproc/updatetime" : 40,
\   "hook/close_quickfix/enable_exit" : 1,
\   "hook/echo/enable" : 1,
\   "hook/echo/output_success" : "> No Errors Found.",
\   "hook/qfsigns_update/enable_exit" : 1,
\   "hook/qfsigns_update/priority_exit" : 3,
\}
" go build
let g:quickrun_config['watchdogs_checker/go_build'] = {
\   'command':     'go',
\   'exec':        '%c build %o',
\   "errorformat" : '%f:%l: %m,%-G%.%#',
\ }
" go lint
let g:quickrun_config['watchdogs_checker/golint'] = {
\   'command':     'golint',
\   'exec':        '%c %o %s:p',
\   "errorformat" : '%f:%l:%c: %m,%-G%.%#',
\ }
let g:quickrun_config["go/watchdogs_checker"] = {
\   "type": "watchdogs_checker/go_build"
\}
call watchdogs#setup(g:quickrun_config)
" 書き込み後にシンタックスチェックを行う
let g:watchdogs_check_BufWritePost_enable = 1
" 一定時間キー入力がなかった時にシンタックスチェックを行う
let g:watchdogs_check_CursorHold_enable = 1
au FileType go command! -buffer Lint WatchdogsRun watchdogs_checker/golint
au FileType go command! -buffer Build WatchdogsRun watchdogs_checker/go_build


"---------------------------------------------
" EasyAlign
"---------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
             \'indentation' : '    ',
             \}
let g:user_emmet_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "$(function() {\n\t${cursor}${child}\n});",
\      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
\      'fn' : "(function() {\n\t${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\    },
\  },
\  'java' : {
\    'indentation' : '    ',
\    'snippets' : {
\      'main': "public static void main(String[] args) {\n\t|\n}",
\      'println': "System.out.println(\"|\");",
\      'class': "public class | {\n}\n",
\    },
\  },
\}


"---------------------------------------------
" vim-operator-surround
"---------------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


"---------------------------------------------
" memolist 関連
"---------------------------------------------
nmap ,mn  :MemoNew<CR>
nmap ,mg  :MemoGrep<CR>
nmap ,mf  :exe "CtrlP" g:memolist_path<cr><f5>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"


"---------------------------------------------
" plasticboy/vim-markdown
"---------------------------------------------
let g:vim_markdown_folding_disabled = 1


"---------------------------------------------
" vimfiler 関連
"---------------------------------------------
let g:vimfiler_as_default_explorer = 1


"---------------------------------------------
" vim-clang
"---------------------------------------------
" disable auto completion for vim-clang
let g:clang_auto = 0

" default 'longest' can not work with neocomplete
let g:clang_c_completeopt   = 'menuone'
let g:clang_cpp_completeopt = 'menuone'

if executable('clang-3.6')
  let g:clang_exec = 'clang-3.6'
elseif executable('clang-3.5')
  let g:clang_exec = 'clang-3.5'
elseif executable('clang-3.4')
  let g:clang_exec = 'clang-3.4'
else
  let g:clang_exec = 'clang'
endif

if executable('clang-format-3.6')
  let g:clang_format_exec = 'clang-format-3.6'
elseif executable('clang-format-3.5')
  let g:clang_format_exec = 'clang-format-3.5'
elseif executable('clang-format-3.4')
  let g:clang_format_exec = 'clang-format-3.4'
else
  let g:clang_exec = 'clang-format'
endif

let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
