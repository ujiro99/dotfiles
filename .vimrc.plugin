" vim-plug automatic installation
if has('win32') || has ('win64')
  if empty(glob('~/AppData/Local/nvim-data/site/autoload/plug.vim'))
    silent !curl -fLo ~/AppData/Local/nvim-data/site/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

call plug#begin()

  Plug 'airblade/vim-gitgutter'
  Plug 'banyan/recognize_charcode.vim'
  Plug 'bfredl/nvim-miniyank'
  Plug 'deton/jasegment.vim'
  Plug 'glidenote/memolist.vim'
  Plug 'honza/vim-snippets'
  Plug 'junegunn/vim-easy-align'
  Plug 'kana/vim-operator-user'
  Plug 'kana/vim-smartinput'
  Plug 'mileszs/ack.vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'rhysd/clever-f.vim'
  Plug 'rhysd/vim-operator-surround'
  Plug 'scrooloose/nerdtree'
  Plug 'thinca/vim-quickrun'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'vim-scripts/gtags.vim'

if has('win32') || has ('win64')
  " windowsではfzfの動作が遅いのでctrlpを使用する
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'tacahiroy/ctrlp-funky'
  Plug 'nixprime/cpsm'
  Plug 'mattn/ctrlp-register'
else
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
endif

  " color scheme
  Plug 'jonathanfilip/vim-lucius', {'do': 'cp colors/* ~/.config/nvim/colors/'}
  Plug 'rhysd/vim-color-spring-night', {'do': 'cp colors/* ~/.config/nvim/colors/'}

  " elm
  Plug 'elmcast/elm-vim', {'for': 'elm'}

  " haskell
  Plug 'dag/vim2hs', {'for': 'haskell'}
  Plug 'eagletmt/ghcmod-vim', {'for': 'haskell'}

  " mql5
  Plug 'rupurt/vim-mql5', {'for': 'mql5'}

  " javascript
  Plug 'heavenshell/vim-jsdoc', {'for': ['js', 'vue']}
"  Plug 'moll/vim-node', {'for': ['js']}
"  Plug 'othree/javascript-libraries-syntax.vim', {'for': ['js', 'vue']}
"  Plug 'pangloss/vim-javascript', {'for': ['js', 'vue']}

  " typescript
  Plug 'leafgarland/typescript-vim', {'for': 'ts'}

  " vue
  Plug 'posva/vim-vue', {'for': 'vue'}

  " html, css
  Plug 'mattn/emmet-vim', {'for': ['html', 'css', 'scss', 'php', 'vue']}

  " css
  Plug 'hail2u/vim-css3-syntax', {'for': 'css'}
  Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}

  " c & cpp
  Plug 'justmao945/vim-clang', {'for': ['c', 'cpp']}
  Plug 'vim-scripts/DoxygenToolkit.vim', {'for': ['c', 'cpp']}
  Plug 'vim-scripts/taglist.vim', {'for': ['c', 'cpp']}


call plug#end()


if has('win32') || has ('win64')
  "---------------------------------------------
  " Ctrlp 関連
  "---------------------------------------------
  let g:ctrlp_map = '<Nop>'
  let g:ctrlp_clear_cache_on_exit = 0 " 終了時キャッシュをクリアしない
  let g:ctrlp_mruf_max = 500           " MRUの最大記録数
  let g:ctrlp_open_new_file = 1        " 新規ファイル作成時にタブで開く
  let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
  let g:ctrlp_funky_syntax_highlight = 1
  let g:ctrlp_show_hidden = 1

  if executable('ag')
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
  endif

  if executable('rg')
    let g:ctrlp_user_command = 'rg --files %s'
    let g:ctrlp_use_caching = 0
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_switch_buffer = 'et'
  endif

  nnoremap ; <Nop> " Use ; for prefix
  nnoremap ;a :<C-u>CtrlP<Space>
  nnoremap ;j :<C-u>CtrlPBuffer<CR>
  nnoremap ;d :<C-u>CtrlPDir<CR>
  nnoremap ;f :<C-u>CtrlP<CR>
  nnoremap ;l :<C-u>CtrlPLine<CR>
  nnoremap ;m :<C-u>CtrlPMRUFiles<CR>
  nnoremap ;q :<C-u>CtrlPQuickfix<CR>
  nnoremap ;n :<C-u>CtrlPMixed<CR>
  nnoremap ;t :<C-u>CtrlPTag<CR>
  nnoremap ;o :<C-u>CtrlPFunky<CR>

else
  "---------------------------------------------
  " fzf 関連
  "---------------------------------------------
  set rtp+=~/src/github.com/junegunn/fzf

  nnoremap ;j :Buffers<CR>
  nnoremap ;f :Files<CR>
  nnoremap ;l :Lines<CR>
  nnoremap ;t :Tags<CR>
  nnoremap ;m :History<CR>
  nnoremap ;s :Snippets<CR>
  nnoremap ;c :BCommits<CR>

  " Customize fzf colors to match your color scheme
  let g:fzf_colors = {
  \   'fg+':     ['fg', 'Error', 'CursorColumn', 'Normal'],
  \   'header':  ['fg', 'Comment'],
  \}

  " Customize fzf command
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*" --glob "!node_modules/*"'

  " [Tags] Command to generate tags file
  let g:fzf_tags_command = 'ctags -R --exclude=dist --exclude=bower_components --exclude=node_modules'

  " Empty value to disable preview window altogether
  let g:fzf_preview_window = []

  " Change directory using ghq
  command! -nargs=* -complete=dir Ghq call fzf#run(fzf#wrap({'source': 'ghq list -p', 'sink': 'cd'}))
  nnoremap ;g :Ghq<CR>
endif


"---------------------------------------------
" NERDTree関連
"---------------------------------------------
nnoremap ;n :NERDTreeToggle<CR>
" ツリーを表示するカレントディレクトリを自動的に変更する
let g:NERDTreeChDirMode = 2
" 隠しファイルを表示する
let g:NERDTreeShowHidden = 1


"---------------------------------------------
" vim-fugitive
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" vim-quickrun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings = 1
" go test
let g:quickrun_config['go.test'] = {
\   'command' : 'go',
\   'exec' : ['%c test']
\}


"---------------------------------------------
" vim-easy-align
"---------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
\  'indentation' : '    ',
\  'variables' : {
\      'lang' : 'ja',
\  },
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'html,c',
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\}


"---------------------------------------------
" javascript-libraries-syntax
"---------------------------------------------
let g:used_javascript_libs = 'vue, angularjs, jquery'


"---------------------------------------------
" vim-jsdoc
"---------------------------------------------
nmap <silent> <C-l> <Plug>(jsdoc)


"---------------------------------------------
" vim-operator-surround
"---------------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


"---------------------------------------------
" memolist 関連
"---------------------------------------------
nmap ,mn  :MemoNew<CR>
nmap ,mg  :MemoGrep<CR>
nmap ,mf  :exe "CtrlP" g:memolist_path<cr><f5>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"


"---------------------------------------------
" vim-clang
"---------------------------------------------
" disable auto completion for vim-clang
let g:clang_auto = 0

" default 'longest' can not work with neocomplete
let g:clang_c_completeopt   = 'menuone'
let g:clang_cpp_completeopt = 'menuone'

if executable('clang-3.6')
  let g:clang_exec = 'clang-3.6'
elseif executable('clang-3.5')
  let g:clang_exec = 'clang-3.5'
elseif executable('clang-3.4')
  let g:clang_exec = 'clang-3.4'
else
  let g:clang_exec = 'clang'
endif

if executable('clang-format-3.6')
  let g:clang_format_exec = 'clang-format-3.6'
elseif executable('clang-format-3.5')
  let g:clang_format_exec = 'clang-format-3.5'
elseif executable('clang-format-3.4')
  let g:clang_format_exec = 'clang-format-3.4'
else
  let g:clang_exec = 'clang-format'
endif

let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'


"---------------------------------------------
" ack.vim
"---------------------------------------------
let g:ackprg = 'rg --vimgrep --no-heading'
let g:ack_mappings = { "o": "<CR>zz" }
let g:ack_use_dispatch = 1
" Enterでファイルを開く。
" 本当はack.vimがデフォルトで対応している筈だが動作しないため、自分で設定
autocmd FileType qf nnoremap <buffer> <CR> :.cc<CR>


"---------------------------------------------
" Vue
"---------------------------------------------
autocmd FileType vue syntax sync fromstart


"---------------------------------------------
" vim-airline
"---------------------------------------------
let g:airline_theme='minimalist'


"---------------------------------------------
" nvim-miniyank
"---------------------------------------------
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)


"---------------------------------------------
" coc.nvim
"---------------------------------------------
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Prettier
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Open snippets list
nnoremap <silent> <space>e  :<C-u>CocList snippets<cr>
" Edit user snippet of current filetype
nnoremap <silent> <space>m  :<C-u>CocCommand snippets.editSnippets<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

let g:coc_global_extensions = [
      \  'coc-css'
      \, 'coc-emmet'
      \, 'coc-eslint'
      \, 'coc-html'
      \, 'coc-json'
      \, 'coc-phpls'
      \, 'coc-prettier'
      \, 'coc-python'
      \, 'coc-stylelint'
      \, 'coc-tsserver'
      \, 'coc-vetur'
      \, 'coc-yank'
      \, 'coc-snippets'
      \]

" For scss files
autocmd FileType scss setl iskeyword+=@-@
