"---------------------------------------------
" NeoBundle 関連
"---------------------------------------------
augroup NeoBundleSource
    autocmd!
    "if has("mac")
    "    autocmd FileType {ruby,markdown} NeoBundleSource
    "                \ vim-rvm
    "    " ruby, markdown のBufferではRvmで設定した環境を使う
    "    autocmd FileType {ruby,markdown} :Rvm
    "endif
    autocmd FileType ruby NeoBundleSource
                \ vim-rails
                \ vim-ruby
    autocmd FileType {xhtml,html,css,eruby,markdown} NeoBundleSource
                \ emmet-vim
    autocmd FileType {javascript,coffee} NeoBundleSource
                \ jasmine.vim
                \ javascript-libraries-syntax
                \ jqapi
                \ jscomplete-vim
                \ jsref
                \ vim-coffee-script
    autocmd FileType {javascript} NeoBundleSource
                \ vim-javascript-syntax
                \ Better-Javascript-Indentation
    autocmd FileType typescript NeoBundleSource
                \ typescript-vim
                \ typescript-tools
    autocmd FileType haml NeoBundleSource
                \ vim-haml
    autocmd FileType jade NeoBundleSource
                \ vim-jade
    autocmd FileType css NeoBundleSource
                \ vim-css3-syntax
    autocmd FileType stylus NeoBundleSource
                \ vim-stylus
    autocmd FileType haskell NeoBundleSource
                \ vim2hs
                \ neco-ghc
                \ ghcmod-vim
augroup END


"---------------------------------------------
" Unite.vim関連
"---------------------------------------------
" 入力モードで開始する
let g:unite_enable_start_insert=1
" history/yankの有効化
let g:unite_source_history_yank_enable =1
" デフォルトでは ignorecase と smartcase を使う
call unite#set_profile('default', 'context', {'ignorecase': 1})
call unite#set_profile('default', 'context', {'smartcase': 1})
" ファイル選択時は smartcase を使わない
call unite#set_profile('files', 'context', {'smartcase': 0})
" unite grep に ptを使う
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
endif

" ファイル一覧(カレントバッファ)
nnoremap <silent> ;f  :<C-u>UniteWithBufferDir file<CR>
" ファイル一覧(カレントディレクトリ)
nnoremap <silent> ;d  :<C-u>UniteWithCurrentDir file<CR>
" レジスタ一覧
nnoremap <silent> ;r  :<C-u>Unite register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ;m  :<C-u>Unite file_mru<CR>
" バッファ一覧
nnoremap <silent> ;j  :<C-u>Unite buffer<CR>
" memolist
nnoremap <silent> ;n  :Unite file:<C-r>=g:memolist_path."/"<CR><CR>
" Tags
nnoremap <silent> ;t  :Unite tag<CR>
" Outline
nnoremap <silent> ;o  :Unite outline<CR>
" Yank
nnoremap <silent> ;y  :<C-u>Unite history/yank<CR>
" Line
nnoremap <silent> ;/  :<C-u>Unite line -start-insert -no-quit<CR>
" grep検索
nnoremap <silent> ;p  :<C-u>Unite grep:.<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ;cg :<C-u>Unite grep:.<CR><C-R><C-W><CR>
" grep検索結果の再呼出
nnoremap <silent> ;l  :<C-u>UniteResume search-buffer<CR>
" git status
nnoremap <silent> ;gs :Unite giti/status<CR>
" git branch
nnoremap <silent> ;gb :Unite giti/branch<CR>
" git log
nnoremap <silent> ;gl :Unite giti/log<CR>


" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q


"---------------------------------------------
" Fugitive 関連
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" QuickRun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings = 1
" go test
let g:quickrun_config['go.test'] = {
\   'command' : 'go',
\   'exec' : ['%c test']
\}

"---------------------------------------------
" WatchDog
"---------------------------------------------
" :WatchdogsRun 終了時に quickfix ウィンドウを閉じる
let g:quickrun_config["watchdogs_checker/_"] = {
\   "runner/vimproc/updatetime" : 40,
\   "hook/close_quickfix/enable_exit" : 1,
\   "hook/echo/enable" : 1,
\   "hook/echo/output_success" : "> No Errors Found.",
\   "hook/qfsigns_update/enable_exit" : 1,
\   "hook/qfsigns_update/priority_exit" : 3,
\}
" go build
let g:quickrun_config['watchdogs_checker/go_build'] = {
\   'command':     'go',
\   'exec':        '%c build %o',
\   "errorformat" : '%f:%l: %m,%-G%.%#',
\ }
" go lint
let g:quickrun_config['watchdogs_checker/golint'] = {
\   'command':     'golint',
\   'exec':        '%c %o %s:p',
\   "errorformat" : '%f:%l:%c: %m,%-G%.%#',
\ }
let g:quickrun_config["go/watchdogs_checker"] = {
\   "type": "watchdogs_checker/go_build"
\}
call watchdogs#setup(g:quickrun_config)
" 書き込み後にシンタックスチェックを行う
let g:watchdogs_check_BufWritePost_enable = 1
" 一定時間キー入力がなかった時にシンタックスチェックを行う
let g:watchdogs_check_CursorHold_enable = 1
au FileType go command! -buffer Lint WatchdogsRun watchdogs_checker/golint
au FileType go command! -buffer Build WatchdogsRun watchdogs_checker/go_build


" "------------------------------------
" " Syntastic
" "------------------------------------
" " エラー行をsignで表示する
" let g:syntastic_enable_signs = 1
" " 可能ならhighligt表示する
" let g:syntastic_enable_highlighting = 1
" " 自動的に開いたり閉じたりする
" let g:syntastic_auto_loc_list=1
" " 実行タイミング
" let g:syntastic_mode_map = {
"   \   'mode': 'active',
"   \   'passive_filetypes': ['go', 'html', 'java']
"   \ }
" " Javac Option
" let g:syntastic_java_javac_options = '-encoding utf-8 -J-Dfile.encoding=UTF8 -Xlint'
" let g:syntastic_java_javac_config_file_enabled = 1
" " Golang Option
" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']


"---------------------------------------------
" EasyAlign
"---------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
             \'indentation' : '    ',
             \}
let g:user_emmet_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "$(function() {\n\t${cursor}${child}\n});",
\      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
\      'fn' : "(function() {\n\t${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\    },
\  },
\ 'java' : {
\  'indentation' : '    ',
\  'snippets' : {
\   'main': "public static void main(String[] args) {\n\t|\n}",
\   'println': "System.out.println(\"|\");",
\   'class': "public class | {\n}\n",
\  },
\ },
\}


"---------------------------------------------
" vim-operator-surround
"---------------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


"---------------------------------------------
" memolist 関連
"---------------------------------------------
map ,mn  :MemoNew<CR>
map ,ml  :MemoList<CR>
map ,mg  :MemoGrep<CR>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"
let g:memolist_unite = 1


"---------------------------------------------
" vim markdown 関連
"---------------------------------------------
let g:vim_markdown_initial_foldlevel=2


"---------------------------------------------
" vimfiler 関連
"---------------------------------------------
let g:vimfiler_as_default_explorer = 1


