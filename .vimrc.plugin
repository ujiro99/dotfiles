"---------------------------------------------
" fzf 関連
"---------------------------------------------
if has('win32')
  set rtp+=~\src\github.com\junegunn\fzf
else
  set rtp+=~/src/github.com/junegunn/fzf
endif

nnoremap ;j :Buffers<CR>
nnoremap ;f :Files<CR>
nnoremap ;l :Lines<CR>
nnoremap ;t :Tags<CR>
nnoremap ;m :History<CR>
nnoremap ;c :BCommits<CR>

" Customize fzf colors to match your color scheme
let g:fzf_colors = {
\   'fg+':     ['fg', 'Error', 'CursorColumn', 'Normal'],
\   'header':  ['fg', 'Comment'],
\}

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R --exclude=dist --exclude=bower_components --exclude=node_modules'

" Change directory using ghq
command! -nargs=* -complete=dir Ghq call fzf#run(fzf#wrap({'source': 'ghq list -p', 'sink': 'cd'}))
nnoremap ;g :Ghq<CR>


"---------------------------------------------
" ALE 関連
"---------------------------------------------
" Put this in vimrc or a plugin file of your own.
" After this is configured, :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier', 'eslint']

" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
" Enable completion where available.
let g:ale_completion_enabled = 1


"---------------------------------------------
" NERDTree関連
"---------------------------------------------
nnoremap ;n :NERDTreeToggle<CR>
set guioptions-=L


"---------------------------------------------
" Fugitive 関連
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" QuickRun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings = 1
" go test
let g:quickrun_config['go.test'] = {
\   'command' : 'go',
\   'exec' : ['%c test']
\}


"---------------------------------------------
" EasyAlign
"---------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
             \'indentation' : '    ',
             \}
let g:user_emmet_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "$(function() {\n\t${cursor}${child}\n});",
\      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
\      'fn' : "(function() {\n\t${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\    },
\  },
\  'java' : {
\    'indentation' : '    ',
\    'snippets' : {
\      'main': "public static void main(String[] args) {\n\t|\n}",
\      'println': "System.out.println(\"|\");",
\      'class': "public class | {\n}\n",
\    },
\  },
\}


"---------------------------------------------
" javascript-libraries-syntax
"---------------------------------------------
let g:used_javascript_libs = 'vue, angularjs, jquery'


"---------------------------------------------
" vim-operator-surround
"---------------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


"---------------------------------------------
" memolist 関連
"---------------------------------------------
nmap ,mn  :MemoNew<CR>
nmap ,mg  :MemoGrep<CR>
nmap ,mf  :exe "CtrlP" g:memolist_path<cr><f5>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"


"---------------------------------------------
" plasticboy/vim-markdown
"---------------------------------------------
let g:vim_markdown_folding_disabled = 1


"---------------------------------------------
" vimfiler 関連
"---------------------------------------------
let g:vimfiler_as_default_explorer = 1


"---------------------------------------------
" vim-clang
"---------------------------------------------
" disable auto completion for vim-clang
let g:clang_auto = 0

" default 'longest' can not work with neocomplete
let g:clang_c_completeopt   = 'menuone'
let g:clang_cpp_completeopt = 'menuone'

if executable('clang-3.6')
  let g:clang_exec = 'clang-3.6'
elseif executable('clang-3.5')
  let g:clang_exec = 'clang-3.5'
elseif executable('clang-3.4')
  let g:clang_exec = 'clang-3.4'
else
  let g:clang_exec = 'clang'
endif

if executable('clang-format-3.6')
  let g:clang_format_exec = 'clang-format-3.6'
elseif executable('clang-format-3.5')
  let g:clang_format_exec = 'clang-format-3.5'
elseif executable('clang-format-3.4')
  let g:clang_format_exec = 'clang-format-3.4'
else
  let g:clang_exec = 'clang-format'
endif

let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'


"---------------------------------------------
" OmniCppComplete
"---------------------------------------------
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowScopeInAddr = 0
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces =["std", "_GLIBCXX_STD"]


"---------------------------------------------
" ack.vim
"---------------------------------------------
let g:ackprg = 'rg --vimgrep --no-heading'
let g:ack_mappings = { "o": "<CR>zz" }
let g:ack_use_dispatch = 1
" Enterでファイルを開く。
" 本当はack.vimがデフォルトで対応している筈だが動作しないため、自分で設定
autocmd FileType qf nnoremap <buffer> <CR> :.cc<CR>


"---------------------------------------------
" jedi.vim
"---------------------------------------------
" docstringは表示しない
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0


"---------------------------------------------
" Vue
"---------------------------------------------
autocmd FileType vue syntax sync fromstart


"---------------------------------------------
" vim-airline
"---------------------------------------------
let g:airline_theme='minimalist'
