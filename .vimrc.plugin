"---------------------------------------------
" fzf 関連
"---------------------------------------------
if has('win32')
  set rtp+=~\src\github.com\junegunn\fzf
else
  set rtp+=~/src/github.com/junegunn/fzf
endif

nnoremap ;j :Buffers<CR>
nnoremap ;f :Files<CR>
nnoremap ;l :Lines<CR>
nnoremap ;t :Tags<CR>
nnoremap ;m :History<CR>
nnoremap ;c :BCommits<CR>

" Customize fzf colors to match your color scheme
let g:fzf_colors = {
\   'fg+':     ['fg', 'Error', 'CursorColumn', 'Normal'],
\   'header':  ['fg', 'Comment'],
\}

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R --exclude=dist --exclude=bower_components --exclude=node_modules'

" Change directory using ghq
command! -nargs=* -complete=dir Ghq call fzf#run(fzf#wrap({'source': 'ghq list -p', 'sink': 'cd'}))
nnoremap ;g :Ghq<CR>


"---------------------------------------------
" ALE 関連
"---------------------------------------------
" Put this in vimrc or a plugin file of your own.
" After this is configured, :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier', 'eslint']

" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
" Enable completion where available.
let g:ale_completion_enabled = 1


"---------------------------------------------
" NERDTree関連
"---------------------------------------------
nnoremap ;n :NERDTreeToggle<CR>
set guioptions-=L


"---------------------------------------------
" Fugitive 関連
"---------------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"---------------------------------------------
" QuickRun 関連
"---------------------------------------------
" 現在のバッファを実行
nnoremap <F5> :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings = 1
" go test
let g:quickrun_config['go.test'] = {
\   'command' : 'go',
\   'exec' : ['%c test']
\}


"---------------------------------------------
" EasyAlign
"---------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"---------------------------------------------
" emmet 関連
"---------------------------------------------
" 補完を有効化
let g:use_emmet_complete_tag = 1
" キーマップを変更する
let g:user_emmet_leader_key = '<C-e>'
" インデントは半角スペース4個
let g:user_emmet_settings = {
             \'indentation' : '    ',
             \}
let g:user_emmet_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'indentation' : ' '
\  },
\  'css' : {
\    'filters' : 'fc',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "$(function() {\n\t${cursor}${child}\n});",
\      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
\      'fn' : "(function() {\n\t${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
\    },
\  },
\  'java' : {
\    'indentation' : '    ',
\    'snippets' : {
\      'main': "public static void main(String[] args) {\n\t|\n}",
\      'println': "System.out.println(\"|\");",
\      'class': "public class | {\n}\n",
\    },
\  },
\}


"---------------------------------------------
" javascript-libraries-syntax
"---------------------------------------------
let g:used_javascript_libs = 'vue, angularjs, jquery'


"---------------------------------------------
" vim-operator-surround
"---------------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


"---------------------------------------------
" memolist 関連
"---------------------------------------------
nmap ,mn  :MemoNew<CR>
nmap ,mg  :MemoGrep<CR>
nmap ,mf  :exe "CtrlP" g:memolist_path<cr><f5>
let g:memolist_memo_date    = "%Y%m%d %H:%M"
let g:memolist_memo_suffix  = "md"
let g:memolist_path         = "~/memo"


"---------------------------------------------
" plasticboy/vim-markdown
"---------------------------------------------
let g:vim_markdown_folding_disabled = 1


"---------------------------------------------
" vimfiler 関連
"---------------------------------------------
let g:vimfiler_as_default_explorer = 1


"---------------------------------------------
" vim-clang
"---------------------------------------------
" disable auto completion for vim-clang
let g:clang_auto = 0

" default 'longest' can not work with neocomplete
let g:clang_c_completeopt   = 'menuone'
let g:clang_cpp_completeopt = 'menuone'

if executable('clang-3.6')
  let g:clang_exec = 'clang-3.6'
elseif executable('clang-3.5')
  let g:clang_exec = 'clang-3.5'
elseif executable('clang-3.4')
  let g:clang_exec = 'clang-3.4'
else
  let g:clang_exec = 'clang'
endif

if executable('clang-format-3.6')
  let g:clang_format_exec = 'clang-format-3.6'
elseif executable('clang-format-3.5')
  let g:clang_format_exec = 'clang-format-3.5'
elseif executable('clang-format-3.4')
  let g:clang_format_exec = 'clang-format-3.4'
else
  let g:clang_exec = 'clang-format'
endif

let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'


"---------------------------------------------
" ack.vim
"---------------------------------------------
let g:ackprg = 'rg --vimgrep --no-heading'
let g:ack_mappings = { "o": "<CR>zz" }
let g:ack_use_dispatch = 1
" Enterでファイルを開く。
" 本当はack.vimがデフォルトで対応している筈だが動作しないため、自分で設定
autocmd FileType qf nnoremap <buffer> <CR> :.cc<CR>


"---------------------------------------------
" jedi.vim
"---------------------------------------------
" docstringは表示しない
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0


"---------------------------------------------
" Vue
"---------------------------------------------
autocmd FileType vue syntax sync fromstart


"---------------------------------------------
" vim-airline
"---------------------------------------------
let g:airline_theme='minimalist'


"---------------------------------------------
" nvim-miniyank
"---------------------------------------------
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)


"---------------------------------------------
" vim-prettier
"---------------------------------------------
" @formatアノテーションを持ったファイルの自動フォーマットを無効にする
let g:prettier#autoformat = 0

" Prettierのパースエラーをquickfixに表示しない
let g:prettier#quickfix_enabled = 0

autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync


"---------------------------------------------
" coc.nvim
"---------------------------------------------
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
